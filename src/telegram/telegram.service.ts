import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import TelegramBot, { Message } from 'node-telegram-bot-api';
import * as fs from 'fs';
import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources';
import { PM_PROMPT } from './constants';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: TelegramBot;
  private openai: OpenAI;
  private readonly prompt: string;
  private chatHistory: Map<number, ChatCompletionMessageParam[]>;

  constructor(private configService: ConfigService) {
    const TELEGRAM_BOT_TOKEN =
      this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    const OPENAI_API_KEY = this.configService.get<string>('OPENAI_API_KEY');

    if (!TELEGRAM_BOT_TOKEN || !OPENAI_API_KEY) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    }

    this.bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
    this.openai = new OpenAI({ apiKey: OPENAI_API_KEY });

    this.chatHistory = new Map();
    this.prompt = PM_PROMPT;
  }

  onModuleInit() {
    console.log('Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω');

    this.bot.on('message', async (msg: Message) => {
      try {
        const chatId = msg.chat.id;
        const userMessage = msg.text?.trim() || '';

        if (userMessage === '/start') {
          this.chatHistory.set(chatId, [
            { role: 'system', content: this.prompt },
          ]);

          await this.bot.sendMessage(
            chatId,
            'üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –¢–ó.',
          );

          const response = await this.chatWithGPT(userMessage);

          if (response.includes('##READY_FOR_SAVE##')) {
            this.saveRequirementsToFile(response);
            await this.bot.sendMessage(
              chatId,
              '‚ùì –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¢–ó? –û—Ç–≤–µ—Ç—å—Ç–µ *–¥–∞* –∏–ª–∏ *–Ω–µ—Ç*.',
              { parse_mode: 'Markdown' },
            );
          } else {
            await this.bot.sendMessage(chatId, response);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ Telegram-–±–æ—Ç–µ:', (error as Error).message);
      }
    });
  }

  private async chatWithGPT(
    chatId: number,
    userMessage: string,
  ): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
      const history = this.chatHistory.get(chatId) || [
        { role: 'system', content: this.prompt },
      ];
      history.push({ role: 'user', content: userMessage });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ OpenAI
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: history,
      });

      const aiResponse =
        response.choices[0]?.message?.content || '–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç ChatGPT';

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
      history.push({ role: 'assistant', content: aiResponse });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
      this.chatHistory.set(chatId, history.slice(-10)); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

      return aiResponse;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ OpenAI:', (error as Error).message);
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI üòî';
    }
  }

  createTask(content: string): string {
    try {
      const filePath = 'requirements.md';
      fs.writeFileSync(filePath, content);
      return filePath;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:', (error as Error).message);
      return '';
    }
  }
}
