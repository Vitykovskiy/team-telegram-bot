import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config/dist/config.service';
import TelegramBot, { Message } from 'node-telegram-bot-api';
import * as fs from 'fs';
import OpenAI from 'openai';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: TelegramBot;
  private openai: OpenAI;
  private readonly prompt: string;

  constructor(private configService: ConfigService) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TELEGRAM_BOT_TOKEN =
      this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    const OPENAI_API_KEY = this.configService.get<string>('OPENAI_API_KEY');

    if (!TELEGRAM_BOT_TOKEN || !OPENAI_API_KEY) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    }

    this.bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
    this.openai = new OpenAI({ apiKey: OPENAI_API_KEY });
    this.prompt = `
    –¢—ã ‚Äî AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É—Ç–æ—á–Ω—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó) –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –µ–≥–æ.
    
    üîπ –ö–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:
    1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    2Ô∏è‚É£ –ó–∞–¥–∞–µ—à—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
    3Ô∏è‚É£ –°–æ–∑–¥–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¢–ó.
    4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ—à—å –º–∞—Ä–∫–µ—Ä "##READY_FOR_SAVE##" –≤ –∫–æ–Ω—Ü–µ.
    
    üîπ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¢–ó:
    """
    ## üìå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    
    ### 1Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    - ...
    
    ### 2Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    - ...
    
    ### 3Ô∏è‚É£ API (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    - ...
    
    ### 4Ô∏è‚É£ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
    - ...
    
    ##READY_FOR_SAVE##
    """
        `;
  }

  onModuleInit() {
    console.log('üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

    this.bot.on('message', async (msg: Message) => {
      try {
        const chatId = msg.chat.id;
        const userMessage = msg.text?.trim() || '';

        if (userMessage === '/start') {
          await this.bot.sendMessage(
            chatId,
            'üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –¢–ó.',
          );
          return;
        }

        await this.bot.sendChatAction(chatId, 'typing');
        const response = await this.chatWithGPT(userMessage);

        if (response.includes('##READY_FOR_SAVE##')) {
          this.saveRequirementsToFile(response);
          await this.bot.sendMessage(
            chatId,
            '‚ùì –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¢–ó? –û—Ç–≤–µ—Ç—å—Ç–µ *–¥–∞* –∏–ª–∏ *–Ω–µ—Ç*.',
            { parse_mode: 'Markdown' },
          );
        } else {
          await this.bot.sendMessage(chatId, response);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ Telegram-–±–æ—Ç–µ:', (error as Error).message);
      }
    });
  }

  private async chatWithGPT(message: string): Promise<string> {
    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: this.prompt },
          { role: 'user', content: message },
        ],
      });

      return (
        response.choices[0]?.message?.content || '–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç ChatGPT'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ OpenAI:', (error as Error).message);
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI üòî';
    }
  }

  saveRequirementsToFile(content: string): string {
    try {
      const filePath = 'requirements.md';
      fs.writeFileSync(filePath, content);
      return filePath;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:', (error as Error).message);
      return '';
    }
  }
}
